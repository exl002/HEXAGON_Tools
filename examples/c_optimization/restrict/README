##################################################################
# Copyright (c) $Date$ QUALCOMM INCORPORATED.
# All Rights Reserved.
# Modified by QUALCOMM INCORPORATED on $Date$
##################################################################
When working with an optimizing compiler, a general rule of thumb is
that any extra information you can expose to the compiler will improve
the compiler's ability to optimize effectively.  This example shows
the benefits of using the "__restrict" keyword for pointers.

The restrict keyword tells the compiler that any data accessed by the
restricted pointer will be accessed only by that pointer.  In other
words, it tells the compiler that the restricted pointer references a
memory location that is distinct from all other memory pointers in the
same scope.  This keyword is helpful, because (without interprocedural
alias analysis) the compiler must assume that pointers might alias one
another.  The restrict keyword relaxes this condition, giving the
compiler more flexibility in reordering memory accesses.

Running the test program will show the performance impact of using the
restrict keyword.  However, the best way to see the difference is to
view the assembly code generated by each of the two function variants.

The file restrict.c shows two versions of a function that takes
pointers (used for arrays) as arguments.  Run the test program to see
the difference in performance when the restrict keyword is used.


Running Example:
1) make

Default compiler and options can be modified on the make command line
using the CC and CFLAGS make variables, respectively.
